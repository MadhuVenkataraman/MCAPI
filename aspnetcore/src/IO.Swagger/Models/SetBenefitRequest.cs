/*
 * Membership APIs
 *
 * To search, enroll, perform benefit selection and view all the eligibile benefits
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SetBenefitRequest :  IEquatable<SetBenefitRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetBenefitRequest" /> class.
        /// </summary>
        /// <param name="ClientId">ClientId (required).</param>
        /// <param name="MemberId">MemberId (required).</param>
        /// <param name="ReviewOnAnniversary">ReviewOnAnniversary (required).</param>
        /// <param name="Action">Action (required).</param>
        /// <param name="PacakgeList">PacakgeList.</param>
        /// <param name="BenefitList">BenefitList.</param>
        /// <param name="EligibilityAnswer">EligibilityAnswer.</param>
        public SetBenefitRequest(string ClientId = null, string MemberId = null, bool? ReviewOnAnniversary = null, string Action = null, List<string> PacakgeList = null, List<string> BenefitList = null, List<EligibilityAnswer> EligibilityAnswer = null)
        {
            // to ensure "ClientId" is required (not null)
            if (ClientId == null)
            {
                throw new InvalidDataException("ClientId is a required property for SetBenefitRequest and cannot be null");
            }
            else
            {
                this.ClientId = ClientId;
            }
            // to ensure "MemberId" is required (not null)
            if (MemberId == null)
            {
                throw new InvalidDataException("MemberId is a required property for SetBenefitRequest and cannot be null");
            }
            else
            {
                this.MemberId = MemberId;
            }
            // to ensure "ReviewOnAnniversary" is required (not null)
            if (ReviewOnAnniversary == null)
            {
                throw new InvalidDataException("ReviewOnAnniversary is a required property for SetBenefitRequest and cannot be null");
            }
            else
            {
                this.ReviewOnAnniversary = ReviewOnAnniversary;
            }
            // to ensure "Action" is required (not null)
            if (Action == null)
            {
                throw new InvalidDataException("Action is a required property for SetBenefitRequest and cannot be null");
            }
            else
            {
                this.Action = Action;
            }
            this.PacakgeList = PacakgeList;
            this.BenefitList = BenefitList;
            this.EligibilityAnswer = EligibilityAnswer;
            
        }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="ClientId")]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets MemberId
        /// </summary>
        [DataMember(Name="MemberId")]
        public string MemberId { get; set; }

        /// <summary>
        /// Gets or Sets ReviewOnAnniversary
        /// </summary>
        [DataMember(Name="ReviewOnAnniversary")]
        public bool? ReviewOnAnniversary { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="Action")]
        public string Action { get; set; }

        /// <summary>
        /// Gets or Sets PacakgeList
        /// </summary>
        [DataMember(Name="PacakgeList")]
        public List<string> PacakgeList { get; set; }

        /// <summary>
        /// Gets or Sets BenefitList
        /// </summary>
        [DataMember(Name="BenefitList")]
        public List<string> BenefitList { get; set; }

        /// <summary>
        /// Gets or Sets EligibilityAnswer
        /// </summary>
        [DataMember(Name="EligibilityAnswer")]
        public List<EligibilityAnswer> EligibilityAnswer { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetBenefitRequest {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  MemberId: ").Append(MemberId).Append("\n");
            sb.Append("  ReviewOnAnniversary: ").Append(ReviewOnAnniversary).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  PacakgeList: ").Append(PacakgeList).Append("\n");
            sb.Append("  BenefitList: ").Append(BenefitList).Append("\n");
            sb.Append("  EligibilityAnswer: ").Append(EligibilityAnswer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((SetBenefitRequest)obj);
        }

        /// <summary>
        /// Returns true if SetBenefitRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SetBenefitRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetBenefitRequest other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.ClientId == other.ClientId ||
                    this.ClientId != null &&
                    this.ClientId.Equals(other.ClientId)
                ) && 
                (
                    this.MemberId == other.MemberId ||
                    this.MemberId != null &&
                    this.MemberId.Equals(other.MemberId)
                ) && 
                (
                    this.ReviewOnAnniversary == other.ReviewOnAnniversary ||
                    this.ReviewOnAnniversary != null &&
                    this.ReviewOnAnniversary.Equals(other.ReviewOnAnniversary)
                ) && 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                ) && 
                (
                    this.PacakgeList == other.PacakgeList ||
                    this.PacakgeList != null &&
                    this.PacakgeList.SequenceEqual(other.PacakgeList)
                ) && 
                (
                    this.BenefitList == other.BenefitList ||
                    this.BenefitList != null &&
                    this.BenefitList.SequenceEqual(other.BenefitList)
                ) && 
                (
                    this.EligibilityAnswer == other.EligibilityAnswer ||
                    this.EligibilityAnswer != null &&
                    this.EligibilityAnswer.SequenceEqual(other.EligibilityAnswer)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ClientId != null)
                    hash = hash * 59 + this.ClientId.GetHashCode();
                if (this.MemberId != null)
                    hash = hash * 59 + this.MemberId.GetHashCode();
                if (this.ReviewOnAnniversary != null)
                    hash = hash * 59 + this.ReviewOnAnniversary.GetHashCode();
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                if (this.PacakgeList != null)
                    hash = hash * 59 + this.PacakgeList.GetHashCode();
                if (this.BenefitList != null)
                    hash = hash * 59 + this.BenefitList.GetHashCode();
                if (this.EligibilityAnswer != null)
                    hash = hash * 59 + this.EligibilityAnswer.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(SetBenefitRequest left, SetBenefitRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SetBenefitRequest left, SetBenefitRequest right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
