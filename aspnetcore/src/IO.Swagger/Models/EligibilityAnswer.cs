/*
 * Membership APIs
 *
 * To search, enroll, perform benefit selection and view all the eligibile benefits
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EligibilityAnswer :  IEquatable<EligibilityAnswer>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EligibilityAnswer" /> class.
        /// </summary>
        /// <param name="BenefitId">BenefitId (required).</param>
        /// <param name="QuestionId">QuestionId (required).</param>
        /// <param name="QuestionDisplayText">QuestionDisplayText (required).</param>
        /// <param name="AnswerId">AnswerId (required).</param>
        /// <param name="AnswerDisplayText">AnswerDisplayText (required).</param>
        public EligibilityAnswer(string BenefitId = null, int? QuestionId = null, string QuestionDisplayText = null, int? AnswerId = null, string AnswerDisplayText = null)
        {
            // to ensure "BenefitId" is required (not null)
            if (BenefitId == null)
            {
                throw new InvalidDataException("BenefitId is a required property for EligibilityAnswer and cannot be null");
            }
            else
            {
                this.BenefitId = BenefitId;
            }
            // to ensure "QuestionId" is required (not null)
            if (QuestionId == null)
            {
                throw new InvalidDataException("QuestionId is a required property for EligibilityAnswer and cannot be null");
            }
            else
            {
                this.QuestionId = QuestionId;
            }
            // to ensure "QuestionDisplayText" is required (not null)
            if (QuestionDisplayText == null)
            {
                throw new InvalidDataException("QuestionDisplayText is a required property for EligibilityAnswer and cannot be null");
            }
            else
            {
                this.QuestionDisplayText = QuestionDisplayText;
            }
            // to ensure "AnswerId" is required (not null)
            if (AnswerId == null)
            {
                throw new InvalidDataException("AnswerId is a required property for EligibilityAnswer and cannot be null");
            }
            else
            {
                this.AnswerId = AnswerId;
            }
            // to ensure "AnswerDisplayText" is required (not null)
            if (AnswerDisplayText == null)
            {
                throw new InvalidDataException("AnswerDisplayText is a required property for EligibilityAnswer and cannot be null");
            }
            else
            {
                this.AnswerDisplayText = AnswerDisplayText;
            }
            
        }

        /// <summary>
        /// Gets or Sets BenefitId
        /// </summary>
        [DataMember(Name="BenefitId")]
        public string BenefitId { get; set; }

        /// <summary>
        /// Gets or Sets QuestionId
        /// </summary>
        [DataMember(Name="QuestionId")]
        public int? QuestionId { get; set; }

        /// <summary>
        /// Gets or Sets QuestionDisplayText
        /// </summary>
        [DataMember(Name="QuestionDisplayText")]
        public string QuestionDisplayText { get; set; }

        /// <summary>
        /// Gets or Sets AnswerId
        /// </summary>
        [DataMember(Name="AnswerId")]
        public int? AnswerId { get; set; }

        /// <summary>
        /// Gets or Sets AnswerDisplayText
        /// </summary>
        [DataMember(Name="AnswerDisplayText")]
        public string AnswerDisplayText { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EligibilityAnswer {\n");
            sb.Append("  BenefitId: ").Append(BenefitId).Append("\n");
            sb.Append("  QuestionId: ").Append(QuestionId).Append("\n");
            sb.Append("  QuestionDisplayText: ").Append(QuestionDisplayText).Append("\n");
            sb.Append("  AnswerId: ").Append(AnswerId).Append("\n");
            sb.Append("  AnswerDisplayText: ").Append(AnswerDisplayText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((EligibilityAnswer)obj);
        }

        /// <summary>
        /// Returns true if EligibilityAnswer instances are equal
        /// </summary>
        /// <param name="other">Instance of EligibilityAnswer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EligibilityAnswer other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.BenefitId == other.BenefitId ||
                    this.BenefitId != null &&
                    this.BenefitId.Equals(other.BenefitId)
                ) && 
                (
                    this.QuestionId == other.QuestionId ||
                    this.QuestionId != null &&
                    this.QuestionId.Equals(other.QuestionId)
                ) && 
                (
                    this.QuestionDisplayText == other.QuestionDisplayText ||
                    this.QuestionDisplayText != null &&
                    this.QuestionDisplayText.Equals(other.QuestionDisplayText)
                ) && 
                (
                    this.AnswerId == other.AnswerId ||
                    this.AnswerId != null &&
                    this.AnswerId.Equals(other.AnswerId)
                ) && 
                (
                    this.AnswerDisplayText == other.AnswerDisplayText ||
                    this.AnswerDisplayText != null &&
                    this.AnswerDisplayText.Equals(other.AnswerDisplayText)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BenefitId != null)
                    hash = hash * 59 + this.BenefitId.GetHashCode();
                if (this.QuestionId != null)
                    hash = hash * 59 + this.QuestionId.GetHashCode();
                if (this.QuestionDisplayText != null)
                    hash = hash * 59 + this.QuestionDisplayText.GetHashCode();
                if (this.AnswerId != null)
                    hash = hash * 59 + this.AnswerId.GetHashCode();
                if (this.AnswerDisplayText != null)
                    hash = hash * 59 + this.AnswerDisplayText.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(EligibilityAnswer left, EligibilityAnswer right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EligibilityAnswer left, EligibilityAnswer right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
