/*
 * Membership APIs
 *
 * To search, enroll, perform benefit selection and view all the eligibile benefits
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnrollRequest :  IEquatable<EnrollRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnrollRequest" /> class.
        /// </summary>
        /// <param name="ClientId">ClientId (required).</param>
        /// <param name="CustomerId">CustomerId (required).</param>
        /// <param name="BankAccountId">BankAccountId (required).</param>
        /// <param name="PackageId">PackageId (required).</param>
        /// <param name="FirstName">FirstName (required).</param>
        /// <param name="LastName">LastName (required).</param>
        /// <param name="DateOfBirth">DateOfBirth (required).</param>
        /// <param name="CardNumber">CardNumber (required).</param>
        /// <param name="MailingAddress1">MailingAddress1 (required).</param>
        /// <param name="City">City (required).</param>
        /// <param name="Country">Country (required).</param>
        /// <param name="IsPrimary">IsPrimary (required).</param>
        /// <param name="AccountType">AccountType (required).</param>
        public EnrollRequest(int? ClientId = null, string CustomerId = null, string BankAccountId = null, string PackageId = null, string FirstName = null, string LastName = null, DateTime? DateOfBirth = null, string CardNumber = null, string MailingAddress1 = null, string City = null, string Country = null, bool? IsPrimary = null, string AccountType = null)
        {
            // to ensure "ClientId" is required (not null)
            if (ClientId == null)
            {
                throw new InvalidDataException("ClientId is a required property for EnrollRequest and cannot be null");
            }
            else
            {
                this.ClientId = ClientId;
            }
            // to ensure "CustomerId" is required (not null)
            if (CustomerId == null)
            {
                throw new InvalidDataException("CustomerId is a required property for EnrollRequest and cannot be null");
            }
            else
            {
                this.CustomerId = CustomerId;
            }
            // to ensure "BankAccountId" is required (not null)
            if (BankAccountId == null)
            {
                throw new InvalidDataException("BankAccountId is a required property for EnrollRequest and cannot be null");
            }
            else
            {
                this.BankAccountId = BankAccountId;
            }
            // to ensure "PackageId" is required (not null)
            if (PackageId == null)
            {
                throw new InvalidDataException("PackageId is a required property for EnrollRequest and cannot be null");
            }
            else
            {
                this.PackageId = PackageId;
            }
            // to ensure "FirstName" is required (not null)
            if (FirstName == null)
            {
                throw new InvalidDataException("FirstName is a required property for EnrollRequest and cannot be null");
            }
            else
            {
                this.FirstName = FirstName;
            }
            // to ensure "LastName" is required (not null)
            if (LastName == null)
            {
                throw new InvalidDataException("LastName is a required property for EnrollRequest and cannot be null");
            }
            else
            {
                this.LastName = LastName;
            }
            // to ensure "DateOfBirth" is required (not null)
            if (DateOfBirth == null)
            {
                throw new InvalidDataException("DateOfBirth is a required property for EnrollRequest and cannot be null");
            }
            else
            {
                this.DateOfBirth = DateOfBirth;
            }
            // to ensure "CardNumber" is required (not null)
            if (CardNumber == null)
            {
                throw new InvalidDataException("CardNumber is a required property for EnrollRequest and cannot be null");
            }
            else
            {
                this.CardNumber = CardNumber;
            }
            // to ensure "MailingAddress1" is required (not null)
            if (MailingAddress1 == null)
            {
                throw new InvalidDataException("MailingAddress1 is a required property for EnrollRequest and cannot be null");
            }
            else
            {
                this.MailingAddress1 = MailingAddress1;
            }
            // to ensure "City" is required (not null)
            if (City == null)
            {
                throw new InvalidDataException("City is a required property for EnrollRequest and cannot be null");
            }
            else
            {
                this.City = City;
            }
            // to ensure "Country" is required (not null)
            if (Country == null)
            {
                throw new InvalidDataException("Country is a required property for EnrollRequest and cannot be null");
            }
            else
            {
                this.Country = Country;
            }
            // to ensure "IsPrimary" is required (not null)
            if (IsPrimary == null)
            {
                throw new InvalidDataException("IsPrimary is a required property for EnrollRequest and cannot be null");
            }
            else
            {
                this.IsPrimary = IsPrimary;
            }
            // to ensure "AccountType" is required (not null)
            if (AccountType == null)
            {
                throw new InvalidDataException("AccountType is a required property for EnrollRequest and cannot be null");
            }
            else
            {
                this.AccountType = AccountType;
            }
            
        }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="clientId")]
        public int? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name="customerId")]
        public string CustomerId { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountId
        /// </summary>
        [DataMember(Name="bankAccountId")]
        public string BankAccountId { get; set; }

        /// <summary>
        /// Gets or Sets PackageId
        /// </summary>
        [DataMember(Name="packageId")]
        public string PackageId { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="dateOfBirth")]
        public DateTime? DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets CardNumber
        /// </summary>
        [DataMember(Name="cardNumber")]
        public string CardNumber { get; set; }

        /// <summary>
        /// Gets or Sets MailingAddress1
        /// </summary>
        [DataMember(Name="MailingAddress1")]
        public string MailingAddress1 { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country")]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets IsPrimary
        /// </summary>
        [DataMember(Name="isPrimary")]
        public bool? IsPrimary { get; set; }

        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [DataMember(Name="accountType")]
        public string AccountType { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnrollRequest {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  BankAccountId: ").Append(BankAccountId).Append("\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  MailingAddress1: ").Append(MailingAddress1).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((EnrollRequest)obj);
        }

        /// <summary>
        /// Returns true if EnrollRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of EnrollRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnrollRequest other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.ClientId == other.ClientId ||
                    this.ClientId != null &&
                    this.ClientId.Equals(other.ClientId)
                ) && 
                (
                    this.CustomerId == other.CustomerId ||
                    this.CustomerId != null &&
                    this.CustomerId.Equals(other.CustomerId)
                ) && 
                (
                    this.BankAccountId == other.BankAccountId ||
                    this.BankAccountId != null &&
                    this.BankAccountId.Equals(other.BankAccountId)
                ) && 
                (
                    this.PackageId == other.PackageId ||
                    this.PackageId != null &&
                    this.PackageId.Equals(other.PackageId)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.DateOfBirth == other.DateOfBirth ||
                    this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(other.DateOfBirth)
                ) && 
                (
                    this.CardNumber == other.CardNumber ||
                    this.CardNumber != null &&
                    this.CardNumber.Equals(other.CardNumber)
                ) && 
                (
                    this.MailingAddress1 == other.MailingAddress1 ||
                    this.MailingAddress1 != null &&
                    this.MailingAddress1.Equals(other.MailingAddress1)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.IsPrimary == other.IsPrimary ||
                    this.IsPrimary != null &&
                    this.IsPrimary.Equals(other.IsPrimary)
                ) && 
                (
                    this.AccountType == other.AccountType ||
                    this.AccountType != null &&
                    this.AccountType.Equals(other.AccountType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ClientId != null)
                    hash = hash * 59 + this.ClientId.GetHashCode();
                if (this.CustomerId != null)
                    hash = hash * 59 + this.CustomerId.GetHashCode();
                if (this.BankAccountId != null)
                    hash = hash * 59 + this.BankAccountId.GetHashCode();
                if (this.PackageId != null)
                    hash = hash * 59 + this.PackageId.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.DateOfBirth != null)
                    hash = hash * 59 + this.DateOfBirth.GetHashCode();
                if (this.CardNumber != null)
                    hash = hash * 59 + this.CardNumber.GetHashCode();
                if (this.MailingAddress1 != null)
                    hash = hash * 59 + this.MailingAddress1.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.IsPrimary != null)
                    hash = hash * 59 + this.IsPrimary.GetHashCode();
                if (this.AccountType != null)
                    hash = hash * 59 + this.AccountType.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(EnrollRequest left, EnrollRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnrollRequest left, EnrollRequest right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
